#!/bin/bash

# set -x

AWS_CMD=${AWS_CMD:-aws}

if ! [[ -z ${AWS_ACCESS_KEY_ID+x} ]]; then
    # just pass-through to the base AWS command
    $AWS_CMD $@
    exit $?
fi

if [[ -z ${AWS_PROFILE+x} ]]; then
    echo "AWS_PROFILE is not set"
    exit 1
fi
BKP_AWS_PROFILE=$AWS_PROFILE

USE_AUTO_MFA=`aws configure get profile.$AWS_PROFILE.use_auto_mfa`
if [ "$USE_AUTO_MFA" != "true" ]; then
    # just pass-through to the base AWS command
    $AWS_CMD $@
    exit $?
fi

# get region from current config
REGION=`aws configure get region`

AWS_AUTO_MFA_PROFILE=${AWS_AUTO_MFA_PROFILE:-$AWS_PROFILE-auto-mfa}

# if MFA profile doesn't already exist, create it
if ! aws configure get profile.$AWS_AUTO_MFA_PROFILE.aws_access_key_id > /dev/null; then
    $AWS_CMD configure set profile.$AWS_AUTO_MFA_PROFILE.aws_access_key_id dummy
    $AWS_CMD configure set profile.$AWS_AUTO_MFA_PROFILE.aws_secret_access_key dummy
    $AWS_CMD configure set profile.$AWS_AUTO_MFA_PROFILE.aws_session_token dummy
fi
$AWS_CMD configure set profile.$AWS_AUTO_MFA_PROFILE.region $REGION

# clear any credentials and point to MFA profile
unset AWS_ACCESS_KEY_ID
unset AWS_SECRET_ACCESS_KEY
unset AWS_SESSION_TOKEN
AWS_PROFILE=$AWS_AUTO_MFA_PROFILE

# try the command under the MFA profile, capture stderr in a variable so we can check for auth errors
AWS_ERROR=$(aws $@ 3>&1 1>&2 2>&3 | tee >(cat - >&2) ; test ${PIPESTATUS[0]} -eq 0)
AWS_EXIT_CODE=$?

NEEDS_AUTH=0
if [ $AWS_EXIT_CODE -ne 0 ]; then
    echo "$AWS_ERROR" | grep AuthFailure > /dev/null
    AUTH_GREP_ERROR=$?
    echo "$AWS_ERROR" | grep RequestExpired > /dev/null
    EXP_GREP_ERROR=$?
    if [ $AUTH_GREP_ERROR -eq 0 ] || [ $EXP_GREP_ERROR -eq 0 ]; then
        NEEDS_AUTH=1
    fi
fi

if [ $NEEDS_AUTH -eq 1 ]; then
    # restore previous profile (temporarily)
    if ! [[ -z ${BKP_AWS_PROFILE+x} ]]; then
        AWS_PROFILE=$BKP_AWS_PROFILE
    fi

    # find MFA device (assumes first in list)
    MFA_DEVICE=`aws iam list-mfa-devices --output text | head -1 | cut -f3`
    if [ $? -ne 0 ]; then
        exit $?
    fi

    # prompt for MFA code, if not provided via env var
    if [ -z $AWS_MFA_CODE ] ; then
        read -p "MFA code for $MFA_DEVICE: " AWS_MFA_CODE
    fi

    # acquire session token
    STS_OUTPUT=`aws sts get-session-token \
        --output text --duration-seconds 43200 \--serial-number $MFA_DEVICE --token-code $AWS_MFA_CODE`
    if [ $? -ne 0 ]; then
        exit $?
    fi
    MFA_ACCESS_KEY_ID=`echo $STS_OUTPUT | cut -d' ' -f2`
    MFA_SECRET_ACCESS_KEY=`echo $STS_OUTPUT | cut -d' ' -f4`
    MFA_SESSION_TOKEN=`echo $STS_OUTPUT | cut -d' ' -f5`

    # configure MFA profile with session token values
    $AWS_CMD configure set aws_access_key_id $MFA_ACCESS_KEY_ID --profile $AWS_AUTO_MFA_PROFILE
    $AWS_CMD configure set aws_secret_access_key $MFA_SECRET_ACCESS_KEY --profile $AWS_AUTO_MFA_PROFILE
    $AWS_CMD configure set aws_session_token $MFA_SESSION_TOKEN --profile $AWS_AUTO_MFA_PROFILE 

    # inherit region from calling context
    $AWS_CMD configure set profile.$AWS_AUTO_MFA_PROFILE.region $REGION

    # run command again under MFA profile
    export AWS_PROFILE=$AWS_AUTO_MFA_PROFILE
    $AWS_CMD $@
fi
