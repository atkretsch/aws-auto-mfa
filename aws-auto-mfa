#!/bin/bash

# set -x

AWS_CMD=${AWS_CMD:-aws}

if ! [[ -z ${AWS_ACCESS_KEY_ID+x} ]]; then
    # just pass-through to the base AWS command
    $AWS_CMD $@
    exit $?
fi

if [[ -z ${AWS_PROFILE+x} ]]; then
    echo "AWS_PROFILE is not set"
    exit 1
fi
BKP_AWS_PROFILE=$AWS_PROFILE

# determine if auto-mfa is enabled for the active profile
USE_AUTO_MFA=`$AWS_CMD configure get profile.$AWS_PROFILE.use_auto_mfa`
# trim whitespace/EOL characters
USE_AUTO_MFA="$(echo -e "${USE_AUTO_MFA}" | tr -d '[:space:]')"
if [ "$USE_AUTO_MFA" != "true" ]; then
    # just pass-through to the base AWS command
    $AWS_CMD $@
    exit $?
fi

# get region from current config
REGION=`$AWS_CMD configure get region`

AWS_AUTO_MFA_PROFILE=${AWS_AUTO_MFA_PROFILE:-$AWS_PROFILE-auto-mfa}

# if MFA profile doesn't already exist, create it
if ! aws configure get profile.$AWS_AUTO_MFA_PROFILE.aws_access_key_id > /dev/null; then
    $AWS_CMD configure set profile.$AWS_AUTO_MFA_PROFILE.aws_access_key_id dummy
    $AWS_CMD configure set profile.$AWS_AUTO_MFA_PROFILE.aws_secret_access_key dummy
    $AWS_CMD configure set profile.$AWS_AUTO_MFA_PROFILE.aws_session_token dummy
fi
$AWS_CMD configure set profile.$AWS_AUTO_MFA_PROFILE.region $REGION

# clear any credentials and point to MFA profile
unset AWS_ACCESS_KEY_ID
unset AWS_SECRET_ACCESS_KEY
unset AWS_SESSION_TOKEN
AWS_PROFILE=$AWS_AUTO_MFA_PROFILE

# try the command under the MFA profile, capture stderr in a variable so we can check for auth errors
AWS_ERR_TMP=$(mktemp /tmp/aws-auto-mfa.err.XXXXXX)
$AWS_CMD $@ 2> $AWS_ERR_TMP
AWS_EXIT_CODE=$?
if [ -s $AWS_ERR_TMP ]; then
    cat $AWS_ERR_TMP 1>&2
fi

NEEDS_AUTH=0
if [ $AWS_EXIT_CODE -ne 0 ]; then
    if cat $AWS_ERR_TMP | grep -e AuthFailure -e RequestExpired -e InvalidClientTokenId > /dev/null ; then
        NEEDS_AUTH=1
    fi
fi

rm $AWS_ERR_TMP

if [ $NEEDS_AUTH -eq 1 ]; then
    # restore previous profile (temporarily)
    AWS_PROFILE=$BKP_AWS_PROFILE

    # find MFA device (assumes first in list)
    MFA_DEVICE=`aws iam list-mfa-devices --output text | head -1 | cut -f3`
    if [ $? -ne 0 ]; then
        exit $?
    fi

    # prompt for MFA code, if not provided via env var
    if [ -z $AWS_MFA_CODE ] ; then
        read -p "MFA code for $MFA_DEVICE: " AWS_MFA_CODE
    fi

    # acquire session token
    STS_OUTPUT=`aws sts get-session-token \
        --output text --duration-seconds 43200 \--serial-number $MFA_DEVICE --token-code $AWS_MFA_CODE`
    if [ $? -ne 0 ]; then
        exit $?
    fi
    MFA_ACCESS_KEY_ID=`echo $STS_OUTPUT | cut -d' ' -f2`
    MFA_SECRET_ACCESS_KEY=`echo $STS_OUTPUT | cut -d' ' -f4`
    MFA_SESSION_TOKEN=`echo $STS_OUTPUT | cut -d' ' -f5`

    # configure MFA profile with session token values
    $AWS_CMD configure set aws_access_key_id $MFA_ACCESS_KEY_ID --profile $AWS_AUTO_MFA_PROFILE
    $AWS_CMD configure set aws_secret_access_key $MFA_SECRET_ACCESS_KEY --profile $AWS_AUTO_MFA_PROFILE
    $AWS_CMD configure set aws_session_token $MFA_SESSION_TOKEN --profile $AWS_AUTO_MFA_PROFILE 

    # inherit region from calling context
    $AWS_CMD configure set profile.$AWS_AUTO_MFA_PROFILE.region $REGION

    # run command again under MFA profile
    AWS_PROFILE=$AWS_AUTO_MFA_PROFILE
    $AWS_CMD $@
fi
